---
# DCPrism Example Ansible Playbook
# This is an example playbook for DCPrism infrastructure management

- name: DCPrism Infrastructure Setup
  hosts: all
  become: yes
  gather_facts: yes
  
  vars:
    project_name: "dcprism"
    environment: "{{ env | default('development') }}"
    
  tasks:
    - name: Display system information
      debug:
        msg: |
          Setting up {{ project_name }} on {{ inventory_hostname }}
          Environment: {{ environment }}
          OS: {{ ansible_distribution }} {{ ansible_distribution_version }}
          Architecture: {{ ansible_architecture }}

    - name: Update system packages
      package:
        name: "*"
        state: latest
      when: ansible_os_family in ['RedHat', 'Debian']

    - name: Install common packages
      package:
        name:
          - curl
          - wget
          - git
          - vim
          - htop
          - unzip
          - software-properties-common
        state: present
      when: ansible_os_family == 'Debian'

    - name: Install common packages (RedHat)
      package:
        name:
          - curl
          - wget
          - git
          - vim
          - htop
          - unzip
          - epel-release
        state: present
      when: ansible_os_family == 'RedHat'

    - name: Create application user
      user:
        name: "{{ project_name }}"
        system: yes
        shell: /bin/bash
        home: "/opt/{{ project_name }}"
        create_home: yes

    - name: Create application directories
      file:
        path: "{{ item }}"
        state: directory
        owner: "{{ project_name }}"
        group: "{{ project_name }}"
        mode: '0755'
      loop:
        - "/opt/{{ project_name }}/apps"
        - "/opt/{{ project_name }}/data"
        - "/opt/{{ project_name }}/logs"
        - "/opt/{{ project_name }}/config"

    - name: Install Docker
      block:
        - name: Add Docker GPG key
          apt_key:
            url: https://download.docker.com/linux/ubuntu/gpg
            state: present
          when: ansible_os_family == 'Debian'

        - name: Add Docker repository
          apt_repository:
            repo: "deb https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
            state: present
          when: ansible_os_family == 'Debian'

        - name: Install Docker
          package:
            name:
              - docker-ce
              - docker-ce-cli
              - containerd.io
              - docker-compose-plugin
            state: present

        - name: Add user to docker group
          user:
            name: "{{ project_name }}"
            groups: docker
            append: yes

        - name: Start and enable Docker
          systemd:
            name: docker
            enabled: yes
            state: started

    - name: Configure firewall (if ufw is present)
      block:
        - name: Check if ufw is installed
          command: which ufw
          register: ufw_check
          ignore_errors: yes

        - name: Configure UFW rules
          ufw:
            rule: allow
            port: "{{ item }}"
            proto: tcp
          loop:
            - "22"    # SSH
            - "80"    # HTTP
            - "443"   # HTTPS
            - "8000"  # Meniscus
            - "8001"  # Fresnel
            - "3000"  # Infisical
          when: ufw_check.rc == 0

        - name: Enable UFW
          ufw:
            state: enabled
          when: ufw_check.rc == 0

    - name: Display completion message
      debug:
        msg: |
          âœ… {{ project_name }} infrastructure setup completed successfully!
          
          Next steps:
          1. Clone the DCPrism repository to /opt/{{ project_name }}/apps/
          2. Configure environment variables
          3. Start the application stack with docker-compose
          
          Useful commands:
          - Check Docker status: systemctl status docker
          - View logs: journalctl -u docker
          - Access application: /opt/{{ project_name }}/
