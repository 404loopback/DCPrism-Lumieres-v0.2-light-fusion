# Dockerfile pour DCPrism-Laravel
FROM php:8.3-fpm-alpine AS base

# Arguments pour l'utilisateur (permet de passer l'UID/GID de l'hôte)
ARG USER_ID=1000
ARG GROUP_ID=1000

# Mettre à jour les packages et installer les dépendances système
RUN apk add --no-cache \
    git \
    curl \
    libpng-dev \
    libxml2-dev \
    zip \
    unzip \
    sqlite-dev \
    oniguruma-dev \
    icu-dev \
    freetype-dev \
    libjpeg-turbo-dev \
    libzip-dev \
    supervisor \
    nginx \
    nodejs \
    npm \
    shadow

# Installer les extensions PHP requises
RUN docker-php-ext-configure gd --with-freetype --with-jpeg \
    && docker-php-ext-install \
    pdo \
    pdo_mysql \
    pdo_sqlite \
    mbstring \
    exif \
    pcntl \
    bcmath \
    gd \
    zip \
    intl \
    xml \
    opcache

# Installer Redis extension
RUN apk add --no-cache --virtual .build-deps \
    $PHPIZE_DEPS \
    && pecl install redis \
    && docker-php-ext-enable redis \
    && apk del .build-deps

# Installer Composer
COPY --from=composer:2.8 /usr/bin/composer /usr/bin/composer

# Configuration PHP
COPY docker/php/php.ini /usr/local/etc/php/php.ini
COPY docker/php/opcache.ini /usr/local/etc/php/conf.d/opcache.ini

# Configuration Nginx
COPY docker/nginx/nginx.conf /etc/nginx/nginx.conf
COPY docker/nginx/default.conf /etc/nginx/http.d/default.conf

# Configuration Supervisor (services désactivés - utilise docker-compose services)
RUN mkdir -p /var/log/supervisor
COPY docker/supervisor/supervisord.conf /etc/supervisor/conf.d/supervisord.conf

# SOLUTION SÉCURISÉE: Ajuster www-data pour correspondre à l'hôte
RUN if [ ${USER_ID:-0} -ne 0 ] && [ ${GROUP_ID:-0} -ne 0 ]; then \
        usermod -u ${USER_ID} www-data && \
        groupmod -g ${GROUP_ID} www-data; \
    fi

# Créer les répertoires nécessaires avec les bonnes permissions
RUN mkdir -p /var/www/storage/logs \
             /var/www/storage/framework/cache \
             /var/www/storage/framework/sessions \
             /var/www/storage/framework/views \
             /var/www/bootstrap/cache \
    && chown -R www-data:www-data /var/www

# Définir le répertoire de travail
WORKDIR /var/www

# Copier les fichiers de dépendances
COPY composer.json composer.lock ./
COPY package.json package-lock.json ./

# Stage de développement
FROM base AS development

# Variables d'environnement pour le développement
ENV APP_ENV=local
ENV APP_DEBUG=true

# Installer les dépendances PHP (avec dev)
RUN composer install --no-scripts --no-autoloader

# Installer les dépendances Node.js (avec dev)
RUN npm ci

# Copier le code source
COPY . .

# Générer l'autoloader et optimiser
RUN composer dump-autoload --optimize

# Permissions sécurisées: propriétaire www-data, groupe www-data, 755 pour les répertoires sensibles
RUN chown -R www-data:www-data /var/www \
    && find /var/www/storage -type d -exec chmod 755 {} \; \
    && find /var/www/storage -type f -exec chmod 644 {} \; \
    && find /var/www/storage/logs -type f -exec chmod 664 {} \; \
    && chmod -R 755 /var/www/bootstrap/cache

# Exposer les ports
EXPOSE 80 443

# Commande par défaut
CMD ["/usr/bin/supervisord", "-c", "/etc/supervisor/conf.d/supervisord.conf"]

# Stage de production
FROM base AS production

# Variables d'environnement pour la production
ENV APP_ENV=production
ENV APP_DEBUG=false

# Installer les dépendances PHP (production seulement)
RUN composer install --no-dev --optimize-autoloader --no-scripts

# Installer les dépendances Node.js et builder
RUN npm ci --only=production
RUN npm run build

# Copier le code source
COPY . .

# Optimisations Laravel pour la production
RUN php artisan config:cache \
    && php artisan route:cache \
    && php artisan view:cache

# Permissions sécurisées pour la production
RUN chown -R www-data:www-data /var/www \
    && find /var/www/storage -type d -exec chmod 755 {} \; \
    && find /var/www/storage -type f -exec chmod 644 {} \; \
    && find /var/www/storage/logs -type f -exec chmod 664 {} \; \
    && chmod -R 755 /var/www/bootstrap/cache

# Nettoyer le cache npm
RUN npm cache clean --force

# Exposer les ports
EXPOSE 80 443

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost/health || exit 1

# Commande par défaut
CMD ["/usr/bin/supervisord", "-c", "/etc/supervisor/conf.d/supervisord.conf"]
