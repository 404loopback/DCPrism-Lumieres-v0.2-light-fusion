# Dockerfile optimisé pour DCPrism-Laravel
# Build time: ~400s → ~60s avec cache

# =============================================================================
# Stage 1: Base system avec dépendances système (cacheable)
# =============================================================================
FROM php:8.3-fpm-alpine AS php-base

# Arguments pour l'utilisateur
ARG USER_ID=1000
ARG GROUP_ID=1000

# Installation optimisée : système + toutes extensions en une couche (gain 30-60s)
RUN apk add --no-cache --virtual .sys-deps \
        git curl libpng-dev libxml2-dev zip unzip sqlite-dev \
        oniguruma-dev icu-dev freetype-dev libjpeg-turbo-dev \
        libzip-dev supervisor nginx nodejs npm shadow && \
    # Installation des dépendances pour compilation PHP
    apk add --no-cache --virtual .build-deps $PHPIZE_DEPS && \
    # Configuration et compilation de toutes les extensions en parallèle
    docker-php-ext-configure gd --with-freetype --with-jpeg && \
    docker-php-ext-install -j$(nproc) \
        pdo pdo_mysql pdo_sqlite mbstring exif pcntl \
        bcmath gd zip intl xml opcache && \
    # Installation Redis via PECL dans la même couche
    pecl install redis && \
    docker-php-ext-enable redis && \
    # Nettoyage agressif pour réduire la taille de l'image
    apk del .build-deps && \
    rm -rf /var/cache/apk/* /tmp/* /var/tmp/* /usr/src/*

# =============================================================================
# Stage 2: Composer layer (très cacheable)
# =============================================================================
FROM php-base AS composer-deps

# Installer Composer
COPY --from=composer:2.8 /usr/bin/composer /usr/bin/composer

# Copier SEULEMENT les fichiers de dépendances
WORKDIR /var/www
COPY composer.json composer.lock ./

# Optimisations Composer avancées (gain 30-45s)
ENV COMPOSER_CACHE_DIR=/tmp/composer-cache \
    COMPOSER_MEMORY_LIMIT=-1 \
    COMPOSER_ALLOW_SUPERUSER=1 \
    COMPOSER_NO_INTERACTION=1
RUN mkdir -p $COMPOSER_CACHE_DIR

# Installer dépendances avec cache mount BuildKit (gains énormes sur rebuilds)
RUN --mount=type=cache,target=/tmp/composer-cache \
    composer install --no-scripts --no-autoloader

# =============================================================================
# Stage 3: Node dependencies layer (très cacheable)
# =============================================================================
FROM node:18-alpine AS node-deps

WORKDIR /var/www
COPY package.json package-lock.json ./

# Cache NPM avec mount BuildKit (gains énormes sur rebuilds)
RUN --mount=type=cache,target=/root/.npm \
    npm ci --prefer-offline

# =============================================================================
# Stage 4: Application finale optimisée
# =============================================================================
FROM php-base AS development

# Variables d'environnement
ENV APP_ENV=local
ENV APP_DEBUG=true

# Réutiliser les dépendances depuis les stages précédents
COPY --from=composer-deps /usr/bin/composer /usr/bin/composer
COPY --from=composer-deps /var/www/vendor ./vendor
COPY --from=node-deps /var/www/node_modules ./node_modules

# Configuration système
COPY docker/php/php.ini /usr/local/etc/php/php.ini
COPY docker/php/opcache.ini /usr/local/etc/php/conf.d/opcache.ini
COPY docker/nginx/nginx.conf /etc/nginx/nginx.conf
COPY docker/nginx/default.conf /etc/nginx/http.d/default.conf
RUN mkdir -p /var/log/supervisor
COPY docker/supervisor/supervisord.conf /etc/supervisor/conf.d/supervisord.conf

# Ajuster www-data AVANT de copier le code
RUN if [ ${USER_ID:-0} -ne 0 ] && [ ${GROUP_ID:-0} -ne 0 ]; then \
        usermod -u ${USER_ID} www-data && \
        groupmod -g ${GROUP_ID} www-data; \
    fi

# Créer structure directories avec bonnes permissions (OPTIMISÉ)
WORKDIR /var/www
RUN mkdir -p storage/logs storage/framework/{cache,sessions,views} bootstrap/cache && \
    chown -R www-data:www-data /var/www && \
    chmod -R 755 storage bootstrap/cache

# Copier le code source (APRÈS avoir configuré les permissions de base)
COPY --chown=www-data:www-data . .

# Finaliser l'installation Composer et optimiser autoloader
RUN composer install --optimize-autoloader --classmap-authoritative

EXPOSE 80 443
CMD ["/usr/bin/supervisord", "-c", "/etc/supervisor/conf.d/supervisord.conf"]

# =============================================================================
# Stage 5: Production optimisée
# =============================================================================
FROM php-base AS production

ENV APP_ENV=production
ENV APP_DEBUG=false

# Installer Composer
COPY --from=composer:2.8 /usr/bin/composer /usr/bin/composer

# Copier dépendances optimisées
COPY composer.json composer.lock package.json package-lock.json ./

# Installer dépendances production avec cache mount et nettoyage agressif
RUN --mount=type=cache,target=/tmp/composer-cache \
    --mount=type=cache,target=/root/.npm \
    composer install --no-dev --optimize-autoloader --no-scripts && \
    npm ci --only=production && \
    npm run build && \
    # Nettoyage agressif (gain 15-30s + réduction taille)
    npm cache clean --force && \
    rm -rf node_modules /tmp/* /var/tmp/* /root/.npm

# Configuration
COPY docker/php/php.ini /usr/local/etc/php/php.ini  
COPY docker/php/opcache.ini /usr/local/etc/php/conf.d/opcache.ini
COPY docker/nginx/nginx.conf /etc/nginx/nginx.conf
COPY docker/nginx/default.conf /etc/nginx/http.d/default.conf
RUN mkdir -p /var/log/supervisor
COPY docker/supervisor/supervisord.conf /etc/supervisor/conf.d/supervisord.conf

# Copier code source
COPY . .

# Optimisations Laravel
RUN php artisan config:cache && \
    php artisan route:cache && \
    php artisan view:cache

# Permissions finales (OPTIMISÉES - gain 60-120s)
RUN chown -R www-data:www-data /var/www && \
    chmod -R 755 storage bootstrap/cache && \
    chmod -R 666 storage/logs/* 2>/dev/null || true

EXPOSE 80 443
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost/health || exit 1

CMD ["/usr/bin/supervisord", "-c", "/etc/supervisor/conf.d/supervisord.conf"]
