services:
  # Application Laravel principale
  app:
    env_file:
      - .env.docker
    build:
      context: .
      dockerfile: Dockerfile
      target: development
      args:
        USER_ID: ${USER_ID:-1000}
        GROUP_ID: ${GROUP_ID:-1000}
    container_name: dcprism-app
    restart: unless-stopped
    ports:
      - "8001:80"
      - "8444:443"
    volumes:
      # Code source en mode développement
      - .:/var/www:cached
      # Volumes pour les données persistantes
      - storage-data:/var/www/storage/app
      - logs-data:/var/www/storage/logs
    environment:
      - APP_NAME=DCPrism
      - APP_ENV=local
      - APP_DEBUG=true
      - APP_URL=http://localhost:8001
      - DB_CONNECTION=mariadb
      - DB_HOST=mariadb
      - DB_PORT=3306
      - DB_DATABASE=dcprism
      - DB_USERNAME=dcprism
      - DB_PASSWORD=dcprism_password
      - REDIS_HOST=redis
      - REDIS_PASSWORD=redis_password
      - REDIS_PORT=6379
      - CACHE_DRIVER=redis
      - SESSION_DRIVER=redis
      - QUEUE_CONNECTION=redis
      - MAIL_MAILER=smtp
      - MAIL_HOST=mailhog
      - MAIL_PORT=1025
    depends_on:
      - mariadb
      - redis
      - mailhog
    networks:
      - dcprism-network

  # Base de données MariaDB
  mariadb:
    image: mariadb:11.2
    container_name: dcprism-mariadb
    restart: unless-stopped
    ports:
      - "3308:3306"
    environment:
      - MYSQL_ROOT_PASSWORD=root_password
      - MYSQL_DATABASE=dcprism
      - MYSQL_USER=dcprism
      - MYSQL_PASSWORD=dcprism_password
    volumes:
      - mariadb-data:/var/lib/mysql
      - ./docker/mysql/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
      - ./docker/mysql/my.cnf:/etc/mysql/conf.d/my.cnf:ro
    networks:
      - dcprism-network

  # Redis pour cache et sessions
  redis:
    image: redis:7.2-alpine
    container_name: dcprism-redis
    restart: unless-stopped
    ports:
      - "6381:6379"
    command: redis-server --requirepass redis_password --appendonly yes
    volumes:
      - redis-data:/data
    networks:
      - dcprism-network

  # Worker pour les queues Laravel
  worker:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
      args:
        USER_ID: ${USER_ID:-1000}
        GROUP_ID: ${GROUP_ID:-1000}
    container_name: dcprism-worker
    restart: unless-stopped
    command: php artisan queue:work --sleep=3 --tries=3 --timeout=90
    volumes:
      - .:/var/www:cached
      - storage-data:/var/www/storage/app
      - logs-data:/var/www/storage/logs
    environment:
      - APP_ENV=local
      - DB_CONNECTION=mariadb
      - DB_HOST=mariadb
      - DB_PORT=3306
      - DB_DATABASE=dcprism
      - DB_USERNAME=dcprism
      - DB_PASSWORD=dcprism_password
      - REDIS_HOST=redis
      - REDIS_PASSWORD=redis_password
      - QUEUE_CONNECTION=redis
    depends_on:
      - mariadb
      - redis
    networks:
      - dcprism-network

  # Scheduler pour les tâches cron Laravel
  scheduler:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
      args:
        USER_ID: ${USER_ID:-1000}
        GROUP_ID: ${GROUP_ID:-1000}
    container_name: dcprism-scheduler
    restart: unless-stopped
    command: crond -f -l 2
    volumes:
      - .:/var/www:cached
      - ./docker/cron/laravel-scheduler:/etc/crontabs/www:ro
    environment:
      - APP_ENV=local
      - DB_CONNECTION=mariadb
      - DB_HOST=mariadb
      - DB_DATABASE=dcprism
      - DB_USERNAME=dcprism
      - DB_PASSWORD=dcprism_password
    depends_on:
      - mariadb
      - redis
    networks:
      - dcprism-network

  # MailHog pour tester les emails en développement
  mailhog:
    image: mailhog/mailhog:latest
    container_name: dcprism-mailhog
    restart: unless-stopped
    ports:
      - "1026:1025"  # SMTP
      - "8026:8025"  # Web interface
    networks:
      - dcprism-network

  # Adminer pour administration base de données
  adminer:
    build:
      context: ./docker/adminer
      dockerfile: Dockerfile
    container_name: dcprism-adminer
    restart: unless-stopped
    ports:
      - "8082:8080"
    environment:
      - ADMINER_DEFAULT_SERVER=mariadb
    depends_on:
      - mariadb
    networks:
      - dcprism-network

  # Redis Commander pour visualiser Redis
  redis-commander:
    image: ghcr.io/joeferner/redis-commander:latest
    container_name: dcprism-redis-commander
    restart: unless-stopped
    ports:
      - "8083:8081"
    environment:
      - REDIS_HOSTS=redis:redis:6379:0:redis_password
    depends_on:
      - redis
    networks:
      - dcprism-network

  # Nginx Load Balancer (DÉSACTIVÉ par défaut pour éviter les conflits)
  # Décommentez et utilisez: docker-compose --profile production up
  nginx-lb:
    image: nginx:alpine
    container_name: dcprism-nginx-lb
    restart: unless-stopped
    ports:
      - "8080:80"  # Ports modifiés pour éviter les conflits
      - "8443:443"
    volumes:
      - ./docker/nginx/load-balancer.conf:/etc/nginx/nginx.conf:ro
      - ./docker/ssl:/etc/nginx/ssl:ro
    depends_on:
      - app
    networks:
      - dcprism-network
    profiles:
      - production

volumes:
  mariadb-data:
    driver: local
  redis-data:
    driver: local
  storage-data:
    driver: local
  logs-data:
    driver: local

networks:
  dcprism-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.25.0.0/16
          gateway: 172.25.0.1
